if status is-interactive
    # Commands to run in interactive sessions can go here
end
# =====================machine-specific-start=====================
{{- if eq .flag "ubuntuamax" }}
# <<<<++++++ubuntu-amax++++++>>>>
set -x PATH /home/linuxbrew/.linuxbrew/bin $PATH
# <<<<==ipinfo==>>>>
function ipinfo
    # 使用 ip 命令获取本机的IP地址，排除回环地址
    set -l ip (ip addr show | grep -w inet | grep -v 127.0.0.1 | awk '{print $2}' | cut -d/ -f1)
    echo "Your IP address is: $ip"
end

{{- else if eq .flag "macmini" }}
# <<<<++++++mac-mini++++++>>>>
# zed
set -x EDITOR "/usr/local/bin/zed --wait"
# homebrew
set -x PATH /opt/homebrew/bin /usr/local/bin $PATH
# <<<<==ipinfo==>>>>
function ipinfo
    # 获取本机的IP地址，排除回环地址
    set -l ip (ifconfig | grep -w inet | grep -v 127.0.0.1 | awk '{print $2}')
    echo "Your IP address is: $ip"
end
{{- else if eq .flag "macair" }}
# <<<<++++++mac-air++++++>>>>
# zed
set -x EDITOR "/usr/local/bin/zed --wait"
# homebrew
set -x PATH /usr/local/bin $PATH
# <<<<==ipinfo==>>>>
function ipinfo
    # 获取本机的IP地址，排除回环地址
    set -l ip (ifconfig | grep -w inet | grep -v 127.0.0.1 | awk '{print $2}')
    echo "Your IP address is: $ip"
end
{{- end }}
# =====================machine-specific-end=====================

# <<<<==machina==>>>>
function h
    cd ~
end
# <<<<==git==>>>>
function gad
    git add $argv
end
function gmt
    git commit $argv
end
function gph
    git push $argv
end
function gfh
    git fetch $argv
end
function gss
    git status $argv
end
function glg
    git log $argv
end
function gam
    git add . && git commit
end
# <<<<==chezmoi==>>>>
function ch
    chezmoi $argv
end
function chad
    chezmoi add $argv
end
function chap
    chezmoi apply
end
function ched
    chezmoi edit $argv
end
function chcd
    chezmoi cd
end
# <<<<==proxy-setting==>>>>
function proxy
    # Check the number of arguments
    if test (count $argv) -eq 1
        set -g proxy_server $argv[1]
        set -g proxy_port 2080
    else if test (count $argv) -eq 2
        set -g proxy_server $argv[1]
        set -g proxy_port $argv[2]
    else
        echo "please provide the proxy server and optionally the proxy port as arguments"
        return 1
    end
    echo "proxy server: $proxy_server"
    # Set proxy
    set -gx http_proxy "http://$proxy_server:$proxy_port"
    set -gx https_proxy "http://$proxy_server:$proxy_port"
    set -gx socks_proxy "socks5://$proxy_server:$proxy_port"
    set -gx all_proxy "socks5://$proxy_server:$proxy_port"

    # Set environment variables for applications that may use these variables
    set -gx HTTP_PROXY $http_proxy
    set -gx HTTPS_PROXY $https_proxy
    set -gx SOCKS_PROXY $socks_proxy
    set -gx ALL_PROXY $all_proxy

    echo "Proxies set"
    curl "ipinfo.io"
end

function unproxy
    # Unset HTTP and HTTPS proxy
    set -e http_proxy
    set -e https_proxy
    set -e socks_proxy
    set -e all_proxy

    # Unset environment variables for applications that may use these variables
    set -e HTTP_PROXY
    set -e HTTPS_PROXY
    set -e SOCKS_PROXY
    set -e ALL_PROXY
    echo "Proxies unset"
    curl "ipinfo.io"
end

# Example usage:
# To set the proxies, run: set_proxy <proxy_server> [<proxy_port>]
# To unset the proxies, run: unset_proxy

# <<<<==starship==>>>>
starship init fish | source
# <<<<==zoxide==>>>>
zoxide init fish | source
# <<<<==fzf==>>>>
# fzf --fish | source
